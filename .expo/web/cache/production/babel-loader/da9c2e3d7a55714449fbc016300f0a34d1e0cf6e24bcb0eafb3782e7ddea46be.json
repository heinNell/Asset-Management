{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import*as SplashModule from\"expo-splash-screen\";import{nanoid}from\"nanoid/non-secure\";import*as React from\"react\";import Platform from\"react-native-web/dist/exports/Platform\";import{useDeprecated}from\"../useDeprecated\";var globalStack=[];export function SplashScreen(){useGlobalSplash();useDeprecated(\"The <SplashScreen /> component is deprecated. Use `SplashScreen.preventAutoHideAsync()` and `SplashScreen.hideAsync` from `expo-router` instead.\");return null;}function useGlobalSplash(){var stack=React.useRef(null);React.useEffect(function(){stack.current=SplashScreen._pushEntry();return function(){if(stack.current){SplashScreen._popEntry(stack.current);}};},[]);}SplashScreen.hideAsync=function(){forceHideAsync();globalStack.length=0;};var _userControlledAutoHideEnabled=false;var _preventAutoHideAsyncInvoked=false;export var _internal_preventAutoHideAsync=function _internal_preventAutoHideAsync(){var _ErrorUtils;if(_preventAutoHideAsyncInvoked){return;}_preventAutoHideAsyncInvoked=true;if(Platform.OS!==\"web\"&&(_ErrorUtils=ErrorUtils)!=null&&_ErrorUtils.getGlobalHandler){var originalHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function(error,isFatal){SplashScreen.hideAsync();originalHandler(error,isFatal);});}SplashModule.preventAutoHideAsync();};export var _internal_maybeHideAsync=function _internal_maybeHideAsync(){if(_userControlledAutoHideEnabled){return;}SplashScreen.hideAsync();};function forceHideAsync(){return _forceHideAsync.apply(this,arguments);}function _forceHideAsync(){_forceHideAsync=_asyncToGenerator(function*(){return SplashModule.hideAsync().catch(function(error){if(_preventAutoHideAsyncInvoked&&error.message.includes(\"No native splash screen registered for \")){return;}throw error;});});return _forceHideAsync.apply(this,arguments);}SplashScreen.preventAutoHideAsync=function(){_userControlledAutoHideEnabled=true;_internal_preventAutoHideAsync();};SplashScreen._pushEntry=function(){var entry=nanoid();globalStack.push(entry);SplashScreen.preventAutoHideAsync();return entry;};SplashScreen._popEntry=function(entry){var index=globalStack.indexOf(entry);if(index!==-1){globalStack.splice(index,1);}if(globalStack.length===0){SplashScreen.hideAsync();}};","map":{"version":3,"names":["SplashModule","nanoid","React","Platform","useDeprecated","globalStack","SplashScreen","useGlobalSplash","stack","useRef","useEffect","current","_pushEntry","_popEntry","hideAsync","forceHideAsync","length","_userControlledAutoHideEnabled","_preventAutoHideAsyncInvoked","_internal_preventAutoHideAsync","_ErrorUtils","OS","ErrorUtils","getGlobalHandler","originalHandler","setGlobalHandler","error","isFatal","preventAutoHideAsync","_internal_maybeHideAsync","_forceHideAsync","apply","arguments","_asyncToGenerator","catch","message","includes","entry","push","index","indexOf","splice"],"sources":["/workspaces/Asset-Management/node_modules/.pnpm/expo-router@2.0.15_b4efdf747a57d6c457a1ea39ac4e29a2/node_modules/expo-router/src/views/Splash.tsx"],"sourcesContent":["import * as SplashModule from \"expo-splash-screen\";\nimport { nanoid } from \"nanoid/non-secure\";\nimport * as React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { useDeprecated } from \"../useDeprecated\";\n\nconst globalStack: string[] = [];\n\n/**\n * A stack based component for keeping the splash screen visible.\n * Useful for stacked requests that need to be completed before the app is ready.\n * After all instances have been unmounted, the splash screen will be hidden.\n *\n * @example\n * ```tsx\n * function App() {\n *   const [isLoading, setIsLoading] = React.useState(true);\n *\n *   if (isLoading) {\n *     return <SplashScreen />\n *   }\n *\n *   return <Text>Ready!</Text>\n * }\n * ```\n */\nexport function SplashScreen() {\n  useGlobalSplash();\n  useDeprecated(\n    \"The <SplashScreen /> component is deprecated. Use `SplashScreen.preventAutoHideAsync()` and `SplashScreen.hideAsync` from `expo-router` instead.\"\n  );\n  return null;\n}\n\nfunction useGlobalSplash() {\n  const stack = React.useRef<string | null>(null);\n\n  React.useEffect(() => {\n    // Create a stack entry on component mount\n    stack.current = SplashScreen._pushEntry();\n    return () => {\n      if (stack.current) {\n        // Update on component unmount\n        SplashScreen._popEntry(stack.current);\n      }\n    };\n  }, []);\n}\n\nSplashScreen.hideAsync = () => {\n  forceHideAsync();\n  globalStack.length = 0;\n};\n\nlet _userControlledAutoHideEnabled = false;\nlet _preventAutoHideAsyncInvoked = false;\n\n// Expo Router uses this internal method to ensure that we can detect if the user\n// has explicitly opted into preventing the splash screen from hiding. This means\n// they will also explicitly hide it. If they don't, we will hide it for them after\n// the navigation render completes.\nexport const _internal_preventAutoHideAsync = () => {\n  // Memoize, this should only be called once.\n  if (_preventAutoHideAsyncInvoked) {\n    return;\n  }\n  _preventAutoHideAsyncInvoked = true;\n  // Append error handling to ensure any uncaught exceptions result in the splash screen being hidden.\n  if (Platform.OS !== \"web\" && ErrorUtils?.getGlobalHandler) {\n    const originalHandler = ErrorUtils.getGlobalHandler();\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      SplashScreen.hideAsync();\n      originalHandler(error, isFatal);\n    });\n  }\n  SplashModule.preventAutoHideAsync();\n};\n\nexport const _internal_maybeHideAsync = () => {\n  // If the user has explicitly opted into preventing the splash screen from hiding,\n  // we should not hide it for them. This is often used for animated splash screens.\n  if (_userControlledAutoHideEnabled) {\n    return;\n  }\n  SplashScreen.hideAsync();\n};\n\nasync function forceHideAsync() {\n  return SplashModule.hideAsync().catch((error: any) => {\n    // Hide this very unfortunate error.\n    if (\n      // Only throw the error is something unexpected happened.\n      _preventAutoHideAsyncInvoked &&\n      error.message.includes(\"No native splash screen registered for \")\n    ) {\n      return;\n    }\n    throw error;\n  });\n}\n\nSplashScreen.preventAutoHideAsync = () => {\n  _userControlledAutoHideEnabled = true;\n  _internal_preventAutoHideAsync();\n};\n\nSplashScreen._pushEntry = (): any => {\n  const entry = nanoid();\n  globalStack.push(entry);\n  SplashScreen.preventAutoHideAsync();\n  return entry;\n};\n\nSplashScreen._popEntry = (entry: string) => {\n  const index = globalStack.indexOf(entry);\n  if (index !== -1) {\n    globalStack.splice(index, 1);\n  }\n  if (globalStack.length === 0) {\n    SplashScreen.hideAsync();\n  }\n};\n\n// TODO: Add some detection for if the splash screen is visible\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}