{"ast":null,"code":"import{NavigationRouteContext}from\"@react-navigation/native\";import React from\"react\";import{store,useStoreRootState,useStoreRouteInfo}from\"./global-state/router-store\";import{useDeprecated}from\"./useDeprecated\";export function useRootNavigationState(){return useStoreRootState();}export function useRouteInfo(){return useStoreRouteInfo();}export function useRootNavigation(){return store.navigationRef.current;}export function useLink(){useDeprecated(\"`useLink()` is deprecated in favor of `useRouter()`\");return useRouter();}export function useRouter(){return React.useMemo(function(){return{push:store.push,back:store.goBack,replace:store.replace,setParams:store.setParams,canGoBack:store.canGoBack};},[]);}export function useUnstableGlobalHref(){return useStoreRouteInfo().unstable_globalHref;}export function useSegments(){return useStoreRouteInfo().segments;}export function usePathname(){return useStoreRouteInfo().pathname;}export function useGlobalSearchParams(){return useStoreRouteInfo().params;}export function useSearchParams(){return useGlobalSearchParams();}export function useLocalSearchParams(){var _useOptionalLocalRout,_useOptionalLocalRout2;return(_useOptionalLocalRout=(_useOptionalLocalRout2=useOptionalLocalRoute())==null?void 0:_useOptionalLocalRout2.params)!=null?_useOptionalLocalRout:{};}function useOptionalLocalRoute(){var route=React.useContext(NavigationRouteContext);return route;}","map":{"version":3,"names":["NavigationRouteContext","React","store","useStoreRootState","useStoreRouteInfo","useDeprecated","useRootNavigationState","useRouteInfo","useRootNavigation","navigationRef","current","useLink","useRouter","useMemo","push","back","goBack","replace","setParams","canGoBack","useUnstableGlobalHref","unstable_globalHref","useSegments","segments","usePathname","pathname","useGlobalSearchParams","params","useSearchParams","useLocalSearchParams","_useOptionalLocalRout","_useOptionalLocalRout2","useOptionalLocalRoute","route","useContext"],"sources":["/workspaces/Asset-Management/node_modules/.pnpm/expo-router@2.0.15_b4efdf747a57d6c457a1ea39ac4e29a2/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["import {\n  NavigationRouteContext,\n  ParamListBase,\n  RouteProp,\n} from \"@react-navigation/native\";\nimport React from \"react\";\n\nimport {\n  store,\n  useStoreRootState,\n  useStoreRouteInfo,\n} from \"./global-state/router-store\";\nimport { Router } from \"./types\";\nimport { useDeprecated } from \"./useDeprecated\";\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport function useRootNavigationState() {\n  return useStoreRootState();\n}\n\nexport function useRouteInfo() {\n  return useStoreRouteInfo();\n}\n\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n// Wraps useLinkTo to provide an API which is similar to the Link component.\nexport function useLink() {\n  useDeprecated(\"`useLink()` is deprecated in favor of `useRouter()`\");\n  return useRouter();\n}\n\nexport function useRouter(): Router {\n  return React.useMemo(\n    () => ({\n      push: store.push,\n      back: store.goBack,\n      replace: store.replace,\n      setParams: store.setParams,\n      canGoBack: store.canGoBack,\n      // TODO(EvanBacon): add `reload`\n    }),\n    []\n  );\n}\n\n/**\n * @private\n * @returns the current global pathname with query params attached. This may change in the future to include the hostname from a predefined universal link, i.e. `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`\n */\nexport function useUnstableGlobalHref(): string {\n  return useStoreRouteInfo().unstable_globalHref;\n}\n\n/**\n * Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. e.g. /[id]?id=normal -> [\"[id]\"]\n *\n * `useSegments` can be typed using an abstract.\n * Consider the following file structure, and strictly typed `useSegments` function:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.js\n *     - followers.js\n *   - settings.js\n * ```\n * This can be strictly typed using the following abstract:\n *\n * ```ts\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<\n  TSegments extends string[] = string[]\n>(): TSegments {\n  return useStoreRouteInfo().segments as TSegments;\n}\n\n/** @returns global selected pathname without query parameters. */\nexport function usePathname(): string {\n  return useStoreRouteInfo().pathname;\n}\n\n/**\n * Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\n * Useful for analytics or other background operations that don't draw to the screen.\n *\n * When querying search params in a stack, opt-towards using `useLocalSearchParams` as these will only\n * update when the route is focused.\n *\n * @see `useLocalSearchParams`\n */\nexport function useGlobalSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return useStoreRouteInfo().params as Partial<TParams>;\n}\n\n/** @deprecated renamed to `useGlobalSearchParams` */\nexport function useSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return useGlobalSearchParams<TParams>();\n}\n\n/**\n * Returns the URL search parameters for the contextually focused route. e.g. `/acme?foo=bar` -> `{ foo: \"bar\" }`.\n * This is useful for stacks where you may push a new screen that changes the query parameters.\n *\n * To observe updates even when the invoking route is not focused, use `useGlobalSearchParams()`.\n */\nexport function useLocalSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return (useOptionalLocalRoute()?.params ?? ({} as any)) as Partial<TParams>;\n}\n\nfunction useOptionalLocalRoute<T extends RouteProp<ParamListBase>>():\n  | T\n  | undefined {\n  const route = React.useContext(NavigationRouteContext);\n  return route as T | undefined;\n}\n"],"mappings":"AAAA,OACEA,sBAAsB,KAGjB,0BAA0B,CACjC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,OACEC,KAAK,CACLC,iBAAiB,CACjBC,iBAAiB,mCAGnB,OAASC,aAAa,uBAItB,MAAO,SAAS,CAAAC,sBAAsBA,CAAA,CAAG,CACvC,MAAO,CAAAH,iBAAiB,CAAC,CAAC,CAC5B,CAEA,MAAO,SAAS,CAAAI,YAAYA,CAAA,CAAG,CAC7B,MAAO,CAAAH,iBAAiB,CAAC,CAAC,CAC5B,CAEA,MAAO,SAAS,CAAAI,iBAAiBA,CAAA,CAAG,CAClC,MAAO,CAAAN,KAAK,CAACO,aAAa,CAACC,OAAO,CACpC,CAGA,MAAO,SAAS,CAAAC,OAAOA,CAAA,CAAG,CACxBN,aAAa,CAAC,qDAAqD,CAAC,CACpE,MAAO,CAAAO,SAAS,CAAC,CAAC,CACpB,CAEA,MAAO,SAAS,CAAAA,SAASA,CAAA,CAAW,CAClC,MAAO,CAAAX,KAAK,CAACY,OAAO,CAClB,iBAAO,CACLC,IAAI,CAAEZ,KAAK,CAACY,IAAI,CAChBC,IAAI,CAAEb,KAAK,CAACc,MAAM,CAClBC,OAAO,CAAEf,KAAK,CAACe,OAAO,CACtBC,SAAS,CAAEhB,KAAK,CAACgB,SAAS,CAC1BC,SAAS,CAAEjB,KAAK,CAACiB,SAEnB,CAAC,EAAC,CACF,EACF,CAAC,CACH,CAMA,MAAO,SAAS,CAAAC,qBAAqBA,CAAA,CAAW,CAC9C,MAAO,CAAAhB,iBAAiB,CAAC,CAAC,CAACiB,mBAAmB,CAChD,CAqBA,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAEZ,CACb,MAAO,CAAAlB,iBAAiB,CAAC,CAAC,CAACmB,QAAQ,CACrC,CAGA,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAAW,CACpC,MAAO,CAAApB,iBAAiB,CAAC,CAAC,CAACqB,QAAQ,CACrC,CAWA,MAAO,SAAS,CAAAC,qBAAqBA,CAAA,CAEf,CACpB,MAAO,CAAAtB,iBAAiB,CAAC,CAAC,CAACuB,MAAM,CACnC,CAGA,MAAO,SAAS,CAAAC,eAAeA,CAAA,CAET,CACpB,MAAO,CAAAF,qBAAqB,CAAU,CAAC,CACzC,CAQA,MAAO,SAAS,CAAAG,oBAAoBA,CAAA,CAEd,KAAAC,qBAAA,CAAAC,sBAAA,CACpB,OAAAD,qBAAA,EAAAC,sBAAA,CAAQC,qBAAqB,CAAC,CAAC,eAAvBD,sBAAA,CAAyBJ,MAAM,QAAAG,qBAAA,CAAK,CAAC,CAAC,CAChD,CAEA,QAAS,CAAAE,qBAAqBA,CAAA,CAEhB,CACZ,GAAM,CAAAC,KAAK,CAAGhC,KAAK,CAACiC,UAAU,CAAClC,sBAAsB,CAAC,CACtD,MAAO,CAAAiC,KAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}